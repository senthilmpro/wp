{"version":3,"sources":["logo.svg","config.js","services/archive-util.js","services/wordpress-util.js","services/parser-util.js","services/metadata-util.js","components/ItemLink/ItemLink.js","components/ArchiveItem/ArchiveItem.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WpConfig","utils","parseContent","content","DOMParser","parseFromString","querySelector","innerText","parseEncodedContent","text","length","substring","convertToObject","str","atob","JSON","parse","fetchArchiveItem","url","a","axios","get","then","res","data","console","log","WordpressUtil","fetchPostsUrl","site","page","number","fetchWpContent","parser","fetchDataAndTransform","pageIndex","objArray","posts","forEach","val","ind","title","htmlText","decodedText","obj","finalObj","push","ignoredFormats","ignoreExtensions","map","x","toLowerCase","URL_TYPE","SELECTED_URL_TYPE","MetadataUtil","fileLinks","dark","server","dir","files","metadata","newFiles","filter","indexOf","format","filename","isPresent","containsIgnoreExtension","name","source","identifier","downloadUrl","identifer","ItemLink","fullLink","getLink","split","pop","URL","err","isValidLink","href","target","ArchiveItem","useState","visible","setVisible","initialState","status","items","itemState","setItemState","fetchArchiveUrl","isPostVisible","c","reqUrl","replace","linksArr","filters","className","strCopy","String","match","splits","cleanTitle","includes","getResolution","onClick","Home","setData","setPageIndex","setArchiveLinks","linksArray","useEffect","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,I,gDCAFA,EACJ,0BADIA,EAGD,G,gBCANC,EAAQ,CACVC,aAAc,SAACC,GAIX,OAHe,IAAIC,WACIC,gBAAgBF,EAAS,aAC5BG,cAAc,KAAKC,WAG3CC,oBAAqB,SAACC,GAElB,OAAGA,GAAQA,EAAKC,OAAS,EACdD,EAAKE,UAAU,EAFP,GAEuBF,EAAKE,UAAU,IAElD,MAEXC,gBAAiB,SAACH,GACd,IAAII,EAAMC,KAAKL,GACf,GAAGI,GAAqB,iBAAPA,EACb,OAAOE,KAAKC,MAAMH,IAG1BI,iBAAiB,WAAD,4BAAE,WAAMC,GAAN,eAAAC,EAAA,sEACKC,IAAMC,IAAIH,GAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QADpC,cACRA,EADQ,OAEdC,QAAQC,IAAIF,GAFE,kBAGPA,GAHO,2CAAF,mDAAC,IAWNvB,IC/BT0B,EAAgB,CAClBC,cAAe,SAACC,EAAMC,EAAMC,GACxB,MAAM,oDAAN,OAA2DF,EAA3D,yBAAgFE,EAAhF,iBAA+FD,EAA/F,0BAEJE,eAAe,WAAD,4BAAE,gDAAAb,EAAA,6DAAOU,EAAP,+BAAc7B,EAAe8B,EAA7B,+BAAkC9B,EAAe+B,EAAjD,+BAA0D/B,EAClEkB,EAAMS,EAAcC,cAAcC,EAAMC,EAAMC,GADtC,kBAGSX,IAAMC,IAAIH,GAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAHxC,cAGJA,EAHI,yBAIDA,GAJC,2DAMD,MANC,0DAAF,kDAAC,IAWJG,ICMAM,EApBA,CACXC,sBAAsB,WAAD,4BAAE,WAAOC,GAAP,iBAAAhB,EAAA,sEACFQ,EAAcK,eAAehC,EAAemC,EAAWnC,GADrD,cACfwB,EADe,OAEfY,EAAW,GACHZ,EAAKa,MACXC,SAAQ,SAACC,EAAKC,GAChB,IAAKrC,EAAkBoC,EAAlBpC,QAASsC,EAASF,EAATE,MACVC,EAAWzC,EAAMC,aAAaC,GAC9BwC,EAAc1C,EAAMO,oBAAoBkC,GACxCE,EAAM3C,EAAMW,gBAAgB+B,GAC5BE,EAAQ,2BACLD,GADK,IAERH,MAAOA,IAEXL,EAASU,KAAKD,MAbC,kBAeZT,GAfY,2CAAF,mDAAC,ICHpBW,G,MAAiB,CACnB,WACA,qBACA,aACA,YACA,qBACA,SAGEC,EAAmB,CACrB,OACA,kBACFC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,iBAEPC,EACW,WAIXC,EAAoBD,EAsCXE,EAzBM,CACjBC,UAAW,SAACX,GACR,IAAIA,EAAK,MAAO,GAChB,GAAGA,EAAIY,KAAM,MAAO,GACpB,IAAOC,EAAgCb,EAAhCa,OAAQC,EAAwBd,EAAxBc,IAAKC,EAAmBf,EAAnBe,MAAOC,EAAYhB,EAAZgB,SACvBC,EAAW,GACf,GAAGF,GAASA,EAAMjD,OAAS,EAEvB,GADAmD,EAAWF,EAAMG,QAAO,SAAAZ,GAAC,OAAyC,GAArCH,EAAegB,QAAQb,EAAEc,WAAeF,QAAO,SAAAZ,GAAC,OAlBzD,SAACe,GAC7B,IAAIC,GAAY,EAOhB,OANAlB,EAAiBV,SAAQ,SAAAY,IACqB,IAAvCe,EAASF,QAAQb,EAAEC,iBAElBe,GAAY,MAGbA,EAUmFC,CAAwBjB,EAAEkB,SAAON,QAAO,SAAAZ,GAAC,MAAiB,YAAZA,EAAEmB,UAC/HhB,GAAqBD,EAAkB,CACtC,IAAIkB,EAAaV,EAASU,WAE1BT,EAAWA,EAASZ,KAAI,SAAAC,GAAC,wBADb,cACa,qBAAoCoB,EAApC,YAAkDpB,EAAEkB,cAE7EP,EAAWA,EAASZ,KAAI,SAAAC,GAAC,wBAAeO,GAAf,OAAwBC,EAAxB,YAA+BR,EAAEkB,SAIlE,OADA3C,QAAQC,IAAI,UAAWmC,GAChBA,GAEXU,YAAa,SAAC3B,GAAS,IAAD,EACd0B,EAAU,OAAG1B,QAAH,IAAGA,GAAH,UAAGA,EAAKgB,gBAAR,aAAG,EAAeY,UAChC,MAAM,gCAAN,OAAuCF,K,OC7BhCG,EAdE,SAAC,GAAuB,IAArBvD,EAAoB,EAApBA,IAAKwD,EAAe,EAAfA,SACfC,EAAU,SAACzD,EAAKwD,GAClB,OAAGA,EAIQxD,EAEAA,EAAI0D,MAAM,KAAKC,OAG9B,OArBgB,SAAC3D,GACjB,IAEI,OADA,IAAI4D,IAAI5D,IACD,EACT,MAAO6D,GAEL,OADAtD,QAAQC,IAAI,uBAAwBR,IAC7B,GAeJ8D,CAAY9D,IAAS,mBAAG+D,KAAMN,EAAQzD,GAAK,GAAOgE,OAAO,SAApC,SAA8CP,EAAQzD,EAAIwD,MCmF3ES,G,MApGK,SAAC,GAAoB,IAAlB1C,EAAiB,EAAjBA,MAAOvB,EAAU,EAAVA,IAC1B,EAA8BkE,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAe,CACjBC,OAAQ,UACRC,MAAO,MAEX,EAAkCL,mBAASG,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAGMC,EAAe,uCAAG,WAAO1E,GAAP,qBAAAC,EAAA,yDAChB0E,EAAgBR,EACpBC,GAAW,SAAAQ,GAAC,OAAKA,KACbD,EAHgB,wBAIhBF,GAAa,SAAAzC,GAAC,kCACPA,GADO,IAEVqC,oBAGJQ,GADIA,EAAS7E,EAAI8E,QAAQ,YAAa,eACtBA,QAAQ,UAAW,YATnB,SAUG/F,EAAMgB,iBAAiB8E,GAV1B,OAUVvE,EAVU,OAWVyE,EAAW3C,EAAaC,UAAU/B,GACxCmE,GAAa,SAAAzC,GAAC,kCACPA,GADO,IAEVsC,OAAQ,UACRC,MAAOQ,OAfK,4CAAH,sDAqBjBC,EAAU,CAAC,wBAAD,gGAAyH,WAAW,yBAAyB,yBACvK,yBAAyB,wBAAwB,yBAAyB,yBAAyB,wBAAwB,2BA4B/H,OACI,sBAAKC,UAAU,WAAf,UACI,sBAAKA,UAAU,YAAf,UACI,gCACI,sBAAMA,UAAU,QAChB,mBAAGlB,KAAM/D,EAAKgE,OAAO,SAArB,SAhCG,SAACzC,GAChB,IAAI2D,EAAU,IAAIC,OAAO5D,GACzB,IACIyD,EAAQ5D,SAAQ,SAAAY,GACZT,EAAQA,EAAMuD,QAAQ9C,EAAE,OAG5B,IAAIoD,EAAQ7D,EAAM6D,MAAM,oBACxB,GAAGA,GAASA,EAAM5F,OAAS,EAAE,CACzB,IAAI6F,EAAS9D,EAAMmC,MAAM,IAAK0B,EAAM,GAAI,KACxC7D,EAAQ8D,EAAO,GAAP,YAAiBD,EAAM,GAAvB,MAA+BC,EAAO,GAElD,OAAO9D,EACT,MAAMsC,GACJ,OAAOqB,GAkBgCI,CAAW/D,KAC1C,sBAAM0D,UAAU,yCAAhB,SAfM,SAAC1D,GACnB,OAAGA,EAAMgE,SAAS,WACP,OACDhE,EAAMgE,SAAS,YACd,QAEJ,KAS+DC,CAAcjE,QAE5E,wBAAQ0D,UAAU,mCACdQ,QAAS,kBAAMf,EAAgB1E,IADnC,mBAEQmE,EAAO,KAAU,KAFzB,eAMAA,GACA,sBAAKc,UAAU,YAAf,UAE4B,WAApBT,EAAUF,QACV,+CAGoB,WAApBE,EAAUF,QACV,+BAEQE,EAAUD,OAAmC,GAA1BC,EAAUD,MAAM/E,QACnC,yCAASQ,GAGTwE,EAAUD,OACVC,EAAUD,MAAMxC,KAAI,SAAAC,GAAC,OAAI,oBAAIiD,UAAU,YAAd,SAA0B,cAAC,EAAD,CAAUjF,IAAKgC,EAAGwB,SAjF9E,wBCkCRkC,EA1CF,WACT,MAAwBxB,mBAAS,IAAjC,mBAAO5D,EAAP,KAAaqF,EAAb,KACA,EAAkCzB,mBAAS,GAA3C,mBAAOjD,EAAP,KAAkB2E,EAAlB,KAGMC,EAAe,uCAAG,WAAO5E,GAAP,eAAAhB,EAAA,sEACKc,EAAOC,sBAAsBC,GADlC,OACd6E,EADc,OAEpBH,EAAQG,GAFY,2CAAH,sDAmBrB,OAJAC,qBAAU,WACNF,EAAgB5E,KACjB,CAACA,IAGA,sBAAKgE,UAAU,iBAAf,UACI,8BACI,+BAxBM,aAwBN,WAAwBhE,OAE5B,qBAAKgE,UAAU,qBAAf,SAEQ3E,EAAKyB,KAAI,SAAAV,GAAG,OAAI,cAAC,EAAD,CAAarB,IAAKqB,EAAIrB,IAAKuB,MAAOF,EAAIE,OAAYF,EAAIrB,UAG9E,sBAAKiF,UAAU,gBAAf,UACI,wBAAQA,UAAU,eAAeQ,QAAS,WApB9CxE,EAAY,GACZ2E,GAAa,SAAAhB,GAAC,OAAIA,EAAI,MAmBlB,sBACA,wBAAQK,UAAU,eAAeQ,QAAS,WAzBlDG,GAAa,SAAAhB,GAAC,OAAIA,EAAI,MAyBd,yBC5BDoB,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCISgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/F,MAAK,YAAkD,IAA/CgG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1e919f6f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const WpConfig = {\n    site: `archive1x.wordpress.com`,\n    page: 1,\n    number: 10\n}","\nimport axios from 'axios';\n\nconst utils = {\n    parseContent: (content) => {\n        const parser = new DOMParser();\n        const htmlObj = parser.parseFromString(content, 'text/html');\n        const text= htmlObj.querySelector('p').innerText;\n        return text;\n    },\n    parseEncodedContent: (text) => {\n        const splitIndex = 4;\n        if(text && text.length > 4){\n            return text.substring(0,splitIndex) + text.substring(12)\n        }\n        return null;\n    },\n    convertToObject: (text) => {\n        let str = atob(text);\n        if(str && typeof str == \"string\"){\n            return JSON.parse(str);\n        }\n    },\n    fetchArchiveItem: async(url) => {\n        const data = await axios.get(url).then(res => res.data);\n        console.log(data);\n        return data;\n    }\n}\n\nlet main = async () => {\n    \n}\n\nexport default utils;","import axios from \"axios\";\nimport { WpConfig } from \"../config\";\n\nconst WordpressUtil = {\n    fetchPostsUrl: (site, page, number) => {\n        return `https://public-api.wordpress.com/rest/v1.1/sites/${site}/posts?number=${number}&page=${page}&fields=title,content`;\n    },\n    fetchWpContent: async (site = WpConfig.site, page=WpConfig.site, number = WpConfig.number) => {\n        let url = WordpressUtil.fetchPostsUrl(site, page, number);\n        try {\n            let data = await axios.get(url).then(res => res.data);\n            return data;\n        } catch(err) {\n            return null;\n        }\n    }\n}\n\nexport default WordpressUtil;","import { WpConfig } from '../config';\nimport utils from './archive-util';\nimport WordpressUtil from './wordpress-util';\n\nconst parser = {\n    fetchDataAndTransform: async (pageIndex) => {\n        let data = await WordpressUtil.fetchWpContent(WpConfig.site, pageIndex, WpConfig.number);\n        let objArray = [];\n        let posts = data.posts;\n        posts.forEach((val, ind) => {\n            let {content, title} = val;\n            let htmlText = utils.parseContent(content);\n            let decodedText = utils.parseEncodedContent(htmlText);\n            let obj = utils.convertToObject(decodedText);\n            let finalObj = {\n                ...obj,\n                title: title\n            }\n            objArray.push(finalObj);\n        })\n        return objArray;\n    }\n}\n\nexport default parser;","// archive metadata util.\n\nconst ignoredFormats = [\n    \"Metadata\",\n    \"Archive BitTorrent\",\n    \"BitTorrent\",\n    \"Thumbnail\",\n    \"BitTorrentContents\",\n    \"Text\"\n];\n\nconst ignoreExtensions = [\n    '.NFO',\n    '__ia_thumb.jpg'\n].map(x => x.toLowerCase());\n\nconst URL_TYPE = {\n    \"ORIGINAL\" : \"ORIGINAL\",\n    \"PARSED\": \"PARSED\"\n}\n\nconst SELECTED_URL_TYPE = URL_TYPE.ORIGINAL;\n\nconst containsIgnoreExtension = (filename) => {\n    let isPresent = false;\n    ignoreExtensions.forEach(x => {\n        if(filename.indexOf(x.toLowerCase()) !== -1)\n        {\n            isPresent = true;\n        }\n    })\n    return isPresent;\n}\n\nconst MetadataUtil = {\n    fileLinks: (obj) => {\n        if(!obj) return [];\n        if(obj.dark) return [];\n        const {server, dir, files, metadata} = obj;\n        let newFiles = [];\n        if(files && files.length > 0){\n            newFiles = files.filter(x => ignoredFormats.indexOf(x.format) == -1).filter(x => !containsIgnoreExtension(x.name)).filter(x => (x.source == \"original\"));\n            if(SELECTED_URL_TYPE == URL_TYPE.ORIGINAL){\n                let identifier = metadata.identifier;\n                let hostname = `archive.org`\n                newFiles = newFiles.map(x => `https://${hostname}/download/${identifier}/${x.name}`)\n            } else {\n                newFiles = newFiles.map(x => `https://${server}${dir}/${x.name}`)\n            }\n        }\n        console.log(\"FILES: \", newFiles);\n        return newFiles;\n    },\n    downloadUrl: (obj) => {\n        let identifier = obj?.metadata?.identifer;\n        return `https://archive.org/download/${identifier}`;\n    }\n}\n\nexport default MetadataUtil;","import React from 'react';\n\nconst isValidLink = (url) => {\n    try {\n        new URL(url);\n        return true;\n    } catch (err) {\n        console.log(\"ERR >> Invalid Link \", url);\n        return false;\n    }\n}\n\nconst ItemLink = ({ url, fullLink }) => {\n    const getLink = (url, fullLink) => {\n        if(fullLink){\n            // let fileName = url.split('/').pop();\n            // let encodedFileName = encodeURIComponent(fileName);\n            // return url.replace(fileName, encodedFileName);\n            return url;\n        } else {\n            return url.split('/').pop();\n        }\n    }\n    return isValidLink(url) && (<a href={getLink(url, true)} target=\"_blank\">{getLink(url,fullLink)}</a>);\n}\n\nexport default ItemLink;","import React, { useState } from 'react';\nimport utils from '../../services/archive-util';\nimport MetadataUtil from '../../services/metadata-util';\nimport ItemLink from '../ItemLink/ItemLink';\nimport './ArchiveItem.css';\n\nconst ArchiveItem = ({ title, url }) => {\n    const [visible, setVisible] = useState(false);\n    const initialState = {\n        status: 'loading',\n        items: null\n    };\n    const [itemState, setItemState] = useState(initialState);\n    const isFullLink = false;\n\n    const fetchArchiveUrl = async (url) => {\n        let isPostVisible = visible;\n        setVisible(c => !c);\n        if(!isPostVisible){\n            setItemState(x => ({\n                ...x,\n                initialState\n            }))\n            let reqUrl = url.replace('/details/', '/metadata/');\n            reqUrl = reqUrl.replace('http://', 'https://');\n            const data = await utils.fetchArchiveItem(reqUrl);\n            const linksArr = MetadataUtil.fileLinks(data);\n            setItemState(x => ({\n                ...x,\n                status: 'fetched',\n                items: linksArr\n            }));\n        }\n        \n    }\n\n    let filters = [`www-tamilblasters-re-`,`www-tamil-blasters-pl-`,`www-tamilblasters-re-`,`www-tamil-blasters-one-`,`www-1-tamil-mv-mx-`,'-torrent','www-tamil-blasters-ws-','www-tamil-blasters-nl-',\n        'www-tamil-blasters-me-','www-tamilblasters-me-','www-tamil-blasters-re-','www-tamil-blasters-uk-','www-tmil-blasters-me-','www-tamil-blasters-net-'];\n    const cleanTitle = (title) => {\n        let strCopy = new String(title);\n        try {\n            filters.forEach(x => {\n                title = title.replace(x,'');\n            });\n            // check for year.\n            let match = title.match(/((19|20)(\\d{2}))/);\n            if(match && match.length > 0){\n                let splits = title.split(\"-\"+ match[0]+ \"-\");\n                title = splits[0] + ` (${match[0]}) `+ splits[1];\n            }\n            return title;\n        } catch(err) {\n            return strCopy;\n        }\n    }\n\n    const getResolution = (title) => {\n        if(title.includes('-720-p-')){\n            return '720p'\n        } else if(title.includes('-1080-p-')){\n            return '1080p'\n        } \n        return null;\n    }\n\n    return (\n        <div className=\"LinkItem\">\n            <div className=\"TitleItem\">\n                <div>\n                    <span className=\"dot\"></span>\n                    <a href={url} target=\"_blank\">{cleanTitle(title)}</a>\n                    <span className=\"resolution-badge badge badge-secondary\">{getResolution(title)}</span>\n                </div>\n                <button className=\"btn btn-default btn-sm links-btn\"\n                    onClick={() => fetchArchiveUrl(url)}>\n                    {`${visible ? `- ` : '+ ' } Links`}\n                </button>\n            </div>\n            {\n                visible &&\n                <div className=\"fileLinks\">\n                    {\n                        itemState.status == \"loading\" &&\n                        <div> Loading... </div>\n                    }\n                    {\n                        itemState.status == \"fetched\" &&\n                        <ul>\n                            {\n                                itemState.items && itemState.items.length == 0 &&\n                                <li key={url}>No Items</li>\n                            }\n                            {\n                                itemState.items && \n                                itemState.items.map(x => <li className=\"file-link\"><ItemLink url={x} fullLink={isFullLink} /></li>)\n                            }\n                        </ul>\n                    }\n\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default ArchiveItem;","import React, { useEffect, useState } from 'react';\nimport parser from '../../services/parser-util';\nimport './Home.css';\nimport ArchiveItem from '../ArchiveItem/ArchiveItem';\n\nconst Home = () => {\n    const [data, setData] = useState([]);\n    const [pageIndex, setPageIndex] = useState(1);\n    const siteTitle = \"Archive WP\";\n\n    const setArchiveLinks = async (pageIndex) => {\n        const linksArray = await parser.fetchDataAndTransform(pageIndex);\n        setData(linksArray);\n    }\n\n    const nextItems = () => {\n        setPageIndex(c => c + 1);\n    }\n\n    const prevItems = () => {\n        if (pageIndex > 1) {\n            setPageIndex(c => c - 1);\n        }\n    }\n\n    useEffect(() => {\n        setArchiveLinks(pageIndex);\n    }, [pageIndex])\n\n    return (\n        <div className=\"container Home\">\n            <div>\n                <h2>{siteTitle} - Page {pageIndex}</h2>\n            </div>\n            <div className=\"LinkItemsContainer\">\n                {  \n                    data.map(val => <ArchiveItem url={val.url} title={val.title} key={val.url} />)\n                }\n            </div>\n            <div className=\"btn-container\">\n                <button className=\"btn btn-info\" onClick={() => prevItems()}>Previous</button>\n                <button className=\"btn btn-info\" onClick={() => nextItems()}>Next</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import logo from './logo.svg';\nimport './App.css';\nimport './DarkMode.css';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}