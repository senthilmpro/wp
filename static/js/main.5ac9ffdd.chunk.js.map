{"version":3,"sources":["config.js","services/archive-util.js","services/wordpress-util.js","services/parser-util.js","services/metadata-util.js","components/ItemLink/ItemLink.js","components/ArchiveItem/ArchiveItem.js","components/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WpConfig","utils","parseContent","content","DOMParser","parseFromString","querySelector","innerText","parseEncodedContent","text","length","substring","convertToObject","str","atob","JSON","parse","fetchArchiveItem","url","a","axios","get","then","res","data","console","log","WordpressUtil","fetchPostsUrl","site","page","number","fetchSearchPostsUrl","search","fetchWpContent","parser","fetchDefaultContent","pageIndex","fetchDataAndTransform","objArray","posts","forEach","val","ind","title","htmlText","decodedText","obj","finalObj","push","result","found","ignoredFormats","ignoreExtensions","map","x","toLowerCase","URL_TYPE","SELECTED_URL_TYPE","MetadataUtil","fileLinks","dark","server","dir","files","metadata","newFiles","filter","indexOf","format","filename","isPresent","containsIgnoreExtension","name","source","identifier","downloadUrl","identifer","ItemLink","fullLink","getLink","replace","split","pop","URL","err","isValidLink","href","target","rel","className","ArchiveItem","useState","visible","setVisible","initialState","status","items","itemState","setItemState","fetchArchiveUrl","isPostVisible","c","reqUrl","linksArr","filters","strCopy","match","splits","cleanTitle","includes","getResolution","onClick","Home","setData","count","setCount","setPageIndex","searchValue","setSearchValue","setArchiveLinks","searchItem","useEffect","type","placeholder","onKeyUp","e","value","icon","faSearch","disabled","Math","ceil","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ac9ffdd.chunk.js","sourcesContent":["export const WpConfig = {\n    site: `archive1x.wordpress.com`,\n    page: 1,\n    number: 10\n}","\nimport axios from 'axios';\n\nconst utils = {\n    parseContent: (content) => {\n        const parser = new DOMParser();\n        const htmlObj = parser.parseFromString(content, 'text/html');\n        const text = htmlObj.querySelector('p').innerText;\n        return text;\n    },\n    parseEncodedContent: (text) => {\n        const splitIndex = 4;\n        if (text && text.length > 4) {\n            return text.substring(0, splitIndex) + text.substring(12)\n        }\n        return null;\n    },\n    convertToObject: (text) => {\n        let str = atob(text);\n        if (str && typeof str === \"string\") {\n            return JSON.parse(str);\n        }\n    },\n    fetchArchiveItem: async (url) => {\n        const data = await axios.get(url).then(res => res.data);\n        console.log(data);\n        return data;\n    }\n}\n\n\nexport default utils;","import axios from \"axios\";\nimport { WpConfig } from \"../config\";\n\nconst WordpressUtil = {\n    fetchPostsUrl: (site, page, number) => {\n        return `https://public-api.wordpress.com/rest/v1.1/sites/${site}/posts?number=${number}&page=${page}&fields=title,content`;\n    },\n    fetchSearchPostsUrl: (site, page, number,search) => {\n        return `https://public-api.wordpress.com/rest/v1.1/sites/${site}/posts?number=${number}&page=${page}&fields=title,content&search=${search}`;\n    },\n    fetchWpContent: async (site = WpConfig.site, page=WpConfig.site, number = WpConfig.number, search) => {\n        let url = null;\n        if(search){\n            url = WordpressUtil.fetchSearchPostsUrl(site, page, number, search);\n        } else {\n            url = WordpressUtil.fetchPostsUrl(site, page, number);\n        }\n        try {\n            let data = await axios.get(url).then(res => res.data);\n            return data;\n        } catch(err) {\n            return null;\n        }\n    }\n}\n\nexport default WordpressUtil;","import { WpConfig } from '../config';\nimport utils from './archive-util';\nimport WordpressUtil from './wordpress-util';\n\nconst parser = {\n    fetchDefaultContent: async (pageIndex, search) => {\n        if(search){\n            return await WordpressUtil.fetchWpContent(WpConfig.site, pageIndex, WpConfig.number, search);\n        } else {\n            return await WordpressUtil.fetchWpContent(WpConfig.site, pageIndex, WpConfig.number);\n        }\n    },\n    fetchDataAndTransform: async (pageIndex, search) => {\n        let data = await parser.fetchDefaultContent(pageIndex, search);\n        let objArray = [];\n        let posts = data.posts;\n        posts.forEach((val, ind) => {\n            let {content, title} = val;\n            let htmlText = utils.parseContent(content);\n            let decodedText = utils.parseEncodedContent(htmlText);\n            let obj = utils.convertToObject(decodedText);\n            let finalObj = {\n                ...obj,\n                title: title\n            }\n            objArray.push(finalObj);\n        });\n        let result = {\n            found: data.found,\n            posts: objArray\n        }\n        return result;\n    }\n}\n\nexport default parser;","// archive metadata util.\n\nconst ignoredFormats = [\n    \"Metadata\",\n    \"Archive BitTorrent\",\n    \"BitTorrent\",\n    \"Thumbnail\",\n    \"BitTorrentContents\",\n    \"Text\"\n];\n\nconst ignoreExtensions = [\n    '.NFO',\n    '__ia_thumb.jpg',\n    'Musafirboy Official.url'\n].map(x => x.toLowerCase());\n\nconst URL_TYPE = {\n    \"ORIGINAL\": \"ORIGINAL\",\n    \"PARSED\": \"PARSED\"\n}\n\nconst SELECTED_URL_TYPE = URL_TYPE.ORIGINAL;\n\nconst containsIgnoreExtension = (filename) => {\n    let isPresent = false;\n    ignoreExtensions.forEach(x => {\n        if (filename.indexOf(x.toLowerCase()) !== -1) {\n            isPresent = true;\n        }\n    })\n    return isPresent;\n}\n\nconst MetadataUtil = {\n    fileLinks: (obj) => {\n        if (!obj) return [];\n        if (obj.dark) return [];\n        const { server, dir, files, metadata } = obj;\n        let newFiles = [];\n        if (files && files.length > 0) {\n            newFiles = files.filter(x => ignoredFormats.indexOf(x.format) === -1).filter(x => !containsIgnoreExtension(x.name)).filter(x => (x.source === \"original\"));\n            if (SELECTED_URL_TYPE === URL_TYPE.ORIGINAL) {\n                let identifier = metadata.identifier;\n                let hostname = `archive.org`\n                newFiles = newFiles.map(x => `https://${hostname}/download/${identifier}/${x.name}`)\n            } else {\n                newFiles = newFiles.map(x => `https://${server}${dir}/${x.name}`)\n            }\n        }\n        console.log(\"FILES: \", newFiles);\n        return newFiles;\n    },\n    downloadUrl: (obj) => {\n        let identifier = obj?.metadata?.identifer;\n        return `https://archive.org/download/${identifier}`;\n    }\n}\n\nexport default MetadataUtil;","import React from 'react';\n\nconst isValidLink = (url) => {\n    try {\n        new URL(url);\n        return true;\n    } catch (err) {\n        console.log(\"ERR >> Invalid Link \", url);\n        return false;\n    }\n}\n\nconst ItemLink = ({ url, fullLink }) => {\n    const getLink = (url, fullLink) => {\n        if (fullLink) {\n            // let fileName = url.split('/').pop();\n            // let encodedFileName = encodeURIComponent(fileName);\n            // return url.replace(fileName, encodedFileName);\n            let str = url;\n            str = str.replace(`[`, `%5B`);\n            str = str.replace(`]`, `%5D`);\n            str = str.replace(`)`, `%29`);\n            str = str.replace(`(`, `%28`);\n            return str;\n        } else {\n            return url.split('/').pop();\n        }\n    }\n    return isValidLink(url) && (<a href={getLink(url, true)} target=\"_blank\" rel=\"noreferrer\" className=\"ArchiveLinkTitle\">{getLink(url, fullLink)}</a>);\n}\n\nexport default ItemLink;","import React, { useState } from 'react';\nimport utils from '../../services/archive-util';\nimport MetadataUtil from '../../services/metadata-util';\nimport ItemLink from '../ItemLink/ItemLink';\nimport './ArchiveItem.css';\n\nconst ArchiveItem = ({ title, url }) => {\n    const [visible, setVisible] = useState(false);\n    const initialState = {\n        status: 'loading',\n        items: null\n    };\n    const [itemState, setItemState] = useState(initialState);\n    const isFullLink = false;\n\n    const fetchArchiveUrl = async (url) => {\n        let isPostVisible = visible;\n        setVisible(c => !c);\n        if (!isPostVisible) {\n            setItemState(x => ({\n                ...x,\n                initialState\n            }))\n            let reqUrl = url.replace('/details/', '/metadata/');\n            reqUrl = reqUrl.replace('http://', 'https://');\n            const data = await utils.fetchArchiveItem(reqUrl);\n            const linksArr = MetadataUtil.fileLinks(data);\n            setItemState(x => ({\n                ...x,\n                status: 'fetched',\n                items: linksArr\n            }));\n        }\n\n    }\n\n    let filters = [`www-tamilblasters-re-`, `www-tamil-blasters-pl-`, `www-tamilblasters-re-`, `www-tamil-blasters-one-`, `www-1-tamil-mv-mx-`, '-torrent', 'www-tamil-blasters-ws-', 'www-tamil-blasters-nl-',\n        'www-tamil-blasters-me-', 'www-tamilblasters-me-', 'www-tamil-blasters-re-', 'www-tamil-blasters-uk-', 'www-tmil-blasters-me-', 'www-tamil-blasters-net-'];\n    const cleanTitle = (title) => {\n        let strCopy = `${title}`\n        try {\n            filters.forEach(x => {\n                title = title.replace(x, '');\n            });\n            // check for year.\n            let match = title.match(/((19|20)(\\d{2}))/);\n            if (match && match.length > 0) {\n                let splits = title.split(\"-\" + match[0] + \"-\");\n                title = splits[0] + ` (${match[0]}) ` + splits[1];\n            }\n            return title;\n        } catch (err) {\n            return strCopy;\n        }\n    }\n\n    const getResolution = (title) => {\n        if (title.includes('-720-p-')) {\n            return '720p'\n        } else if (title.includes('-1080-p-')) {\n            return '1080p'\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"LinkItem\">\n            <div className=\"TitleItem\">\n                <div>\n                    <span className=\"dot\"></span>\n                    <a href={url} target=\"_blank\" rel=\"noreferrer\">{cleanTitle(title)}</a>\n                    <span className=\"resolution-badge badge badge-secondary\">{getResolution(title)}</span>\n                </div>\n                <button className=\"btn btn-default btn-sm links-btn\"\n                    onClick={() => fetchArchiveUrl(url)}>\n                    {`${visible ? `- ` : '+ '} Links`}\n                </button>\n            </div>\n            {\n                visible &&\n                <div className=\"fileLinks\">\n                    {\n                        itemState.status === \"loading\" &&\n                        <div> Loading... </div>\n                    }\n                    {\n                        itemState.status === \"fetched\" &&\n                        <ul>\n                            {\n                                itemState.items && itemState.items.length === 0 &&\n                                <li key={url}>No Items</li>\n                            }\n                            {\n                                itemState.items &&\n                                itemState.items.map(x => <li className=\"file-link\"><ItemLink url={x} fullLink={isFullLink} /></li>)\n                            }\n                        </ul>\n                    }\n\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default ArchiveItem;","import React, { useEffect, useState } from 'react';\nimport parser from '../../services/parser-util';\nimport './Home.css';\nimport ArchiveItem from '../ArchiveItem/ArchiveItem';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { WpConfig } from '../../config';\n\n\n\nconst Home = () => {\n    const [data, setData] = useState([]);\n    const [count, setCount] = useState(0);\n    const [pageIndex, setPageIndex] = useState(1);\n    const [searchValue, setSearchValue] = useState(null);\n    const siteTitle = \"Archive WP\";\n\n    const setArchiveLinks = async (pageIndex) => {\n        const {found, posts} = await parser.fetchDataAndTransform(pageIndex);\n        setCount(found);\n        setData(posts);\n    }\n\n    const searchItem = async (pageIndex) => {\n        setPageIndex(pageIndex);\n        const {found, posts} = await parser.fetchDataAndTransform(pageIndex, searchValue);\n        setCount(found);\n        setData(posts);\n    }\n\n    const nextItems = () => {\n        setPageIndex(c => c + 1);\n    }\n\n    const prevItems = () => {\n        if (pageIndex > 1) {\n            setPageIndex(c => c - 1);\n        }\n    }\n\n    useEffect(() => {\n        if (searchValue) {\n            searchItem(pageIndex);\n        } else {\n            setArchiveLinks(pageIndex);\n        }\n        // eslint-disable-next-line\n    }, [pageIndex])\n\n    return (\n        <div className=\"container Home\">\n            <div>\n                <h2>{siteTitle} - Page {pageIndex}</h2>\n            </div>\n            <div>\n                <input type=\"text\" placeholder=\"Search..\" onKeyUp={e => setSearchValue(e.target.value)} />\n                <button className=\"btn btn-secondary btn-search\" onClick={() => searchItem(1)}><FontAwesomeIcon icon={faSearch} /></button>\n            </div>\n            <div className=\"LinkItemsContainer\">\n                {\n                    data.map(val => <ArchiveItem url={val.url} title={val.title} key={val.url} />)\n                }\n            </div>\n            <div className=\"btn-container\">\n                <button className=\"btn btn-info\" disabled={pageIndex == 1}onClick={() => prevItems()}>Previous</button>\n                <button className=\"btn btn-info\" disabled={pageIndex == Math.ceil(count/WpConfig.number) }onClick={() => nextItems()}>Next</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import './App.css';\nimport Home from './components/Home/Home';\nimport './DarkMode.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}